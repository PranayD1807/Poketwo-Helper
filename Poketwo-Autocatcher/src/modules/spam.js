import { updateStats } from "./stats.js";
import { getRandomInterval } from "../utils/common.js";
import { getBotConfig, updateBotConfig } from "../utils/config.js";

const messages = [
    "üö® beep beep Pikachu crossing the road",
    "üîç finding a Bulbasaur in tall grass",
    "üò± oh no Team Rocket stole my snacks",
    "üêâ Charizard just burned my homework",
    "üì° scanning for Jigglypuff karaoke nearby",
    "ü•∑ sneaky Meowth is plotting something",
    "‚ö° Pikachu overcharged my phone battery",
    "üõë Officer Jenny just gave me a ticket",
    "üçï Snorlax ate my midnight pizza order",
    "üöÄ Team Rocket blasting off in my backyard",
    "üé£ Magikarp flopping on the sidewalk",
    "üî• Charmander heating up my coffee",
    "ü•Ω Squirtle squad invading the swimming pool",
    "üåô Umbreon haunting the dark alley",
    "üé§ Jigglypuff singing everyone to sleep",
    "üöó beep beep Psyduck driving a taxi",
    "üèÉ Machop chasing me down the street",
    "üì¶ Ditto disguised as my Amazon package",
    "‚òÅÔ∏è Lugia flapping strong winds today",
    "üçé Chikorita stealing apples from my bag",
    "üöß Geodude blocking the walking path",
    "üéÆ Pikachu hacked my Nintendo Switch",
    "üìû Porygon answering spam calls for me",
    "ü•µ Charmander made my AC stop working",
    "üö® beep beep Detective Pikachu arriving",
    "ü¶¥ Cubone crying in the corner",
    "üç¶ Vanillite melting in the sun",
    "üåä Gyarados flooding my backyard",
    "üö¥ Ash late to bike practice again",
    "üçå Mankey threw bananas at me",
    "ü¶Ü Psyduck doesn't understand anything",
    "üí§ Snorlax blocking the railway crossing",
    "üëï Eevee stole my hoodie again",
    "üèñÔ∏è Lapras offering free beach rides",
    "üì∏ Pikachu photobombing selfies",
    "ü§ñ Magnemite charging my headphones",
    "ü•ï Buneary stealing my carrots",
    "üö¶ Pok√©ball stuck at a red light",
    "üéÅ Meowth gifting empty boxes",
    "‚õëÔ∏è Nurse Joy treating my fainted hopes",
    "üåã Moltres lighting fireworks tonight",
    "ü•ä Hitmonlee kicking traffic cones",
    "üç© Jigglypuff stole my last donut",
    "üçø Pikachu binge-watching anime",
    "ü¶é Charmander sunbathing by the pool",
    "üõ∂ Totodile rowing upstream too fast",
    "üîî Beedrill ringing morning alarms",
    "üéá Pikachu overloading the city grid",
    "üïµ Detective Pikachu solving cookie thefts",
    "üìú Abra rewinding my homework notes",
    "üß¢ Ash lost his hat again",
    "üöì Officer Jenny tailing Meowth",
    "üê¢ Turtwig hiding in the garden",
    "üçπ Slowpoke mixing tropical shakes",
    "üé≥ Geodude smashed the bowling pins",
    "üõéÔ∏è Jigglypuff singing hotel lullabies",
    "üìå Ditto pretending to be my pillow",
    "‚öîÔ∏è Lucario sparring in the backyard",
    "üöï Pikachu calling a ride share",
    "ü¶â Noctowl staring through my window",
    "üí° Pikachu powered the whole house",
    "üçÄ Shaymin hiding in flower pots",
    "üçí Cherubi dangling on my window frame",
    "üöÅ Pidgeot delivering air mail",
    "‚òï Espurr serving weird coffee vibes",
    "ü™ô Meowth flipping coins all day",
    "üé¢ Gengar riding the rollercoaster",
    "üé≠ Ditto failed cosplay attempt",
    "üö∞ Squirtle broke the water pipes",
    "ü•∂ Articuno freezing traffic lights",
    "üõº Pikachu roller-skating in the mall",
    "ü•û Snorlax crushing pancake stack",
    "üè∞ Dragonite delivering royal mail",
    "ü•Ω Psyduck lifeguarding the beach",
    "ü©∫ Nurse Joy reviving my phone battery",
    "üç´ Munchlax ate all the candy bars",
    "ü¶ë Inkay spilling ink on homework",
    "üé± Pok√©ball mistaken for pool ball",
    "üõéÔ∏è Jigglypuff pressing random doorbells",
    "üö¶ Pikachu controlling traffic signals",
    "üõãÔ∏è Snorlax stealing seats on the bus",
    "üå™Ô∏è Tornadus giving bad hair days",
    "üßä Regice hiding in my freezer",
    "üéØ Ash missing Pok√©ball throws again",
    "üçµ Bulbasaur brewing herbal tea",
    "üçã Pikachu shocked my lemonade",
    "üèÄ Geodude dunked the basketball",
    "üßπ Rotom cleaning my Roomba",
    "üò¥ Slowking daydreaming in meetings",
    "ü§π Mime Jr juggling Pok√©balls",
    "üßÉ Charmander boiled my juice box",
    "üìÄ Porygon glitching in VHS tapes",
    "üçâ Tropius growing fruit snacks",
    "ü™Ñ Alakazam bending spoons again",
    "üêù Beedrill swarming the playground",
    "üõãÔ∏è Wobbuffet crashed my couch",
    "üéÇ Pikachu blew my birthday candles",
    "üöÑ Electrode racing on subway rails",
    "üï∞Ô∏è Celebi messing with my schedule",
];

let messagesCount = 0;
let timeoutID = null;

const spam = (channel, botId) => {
    try {
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        channel.send(randomMessage);
        messagesCount++;
        console.log(`üïí ${new Date().toLocaleTimeString()} | üí¨ Messages: ${messagesCount}`);
        updateStats(1, 0); // Update stats with 1 message sent
        const randomInterval = getRandomInterval(1500, 5000); // random interval between 1.5s to 5s
        timeoutID = setTimeout(() => spam(channel, botId), randomInterval);
    } catch (error) {
        console.error("üí• Error in spam function:", error);
    }
};

export const startSpamming = async (client, commandSentFromChannel) => {
    const botConfig = getBotConfig(client.user.id);
    if (!botConfig) {
        commandSentFromChannel.channel.send("‚ö†Ô∏è Bot config not found.");
        return;
    }

    if (!botConfig.spamChannelID) {
        console.log("‚ö†Ô∏è Please set spamChannelID in your bot's config to enable spamming.");
        commandSentFromChannel.channel.send("‚ö†Ô∏è Please set the spam channel in your config to enable spamming.");
        return;
    }

    if (botConfig.isSpamming) {
        commandSentFromChannel.channel.send("‚ö†Ô∏è Spam is already running.");
        console.log("‚ö†Ô∏è Spam is already running.");
        return;
    }

    const channel = client.channels.cache.get(botConfig.spamChannelID);
    if (!channel) {
        commandSentFromChannel.channel.send("‚ö†Ô∏è Spam channel not found or bot cannot access it.");
        console.log("‚ö†Ô∏è Spam channel not found or inaccessible.");
        return;
    }

    await updateBotConfig(botConfig.botId, { isSpamming: true });

    commandSentFromChannel.channel.send("üü¢ Starting spam!");
    console.log("üü¢ Starting spam!");

    spam(channel, botConfig.botId);
};

export const stopSpamming = async (client, commandSentFromChannel) => {
    const botConfig = getBotConfig(client.user.id);
    if (!botConfig) {
        commandSentFromChannel.channel.send("‚ö†Ô∏è Bot config not found.");
        return;
    }

    if (!botConfig.isSpamming) {
        commandSentFromChannel.channel.send("‚ö†Ô∏è Spam is not running.");
        console.log("‚ö†Ô∏è Spam is not running.");
        return;
    }

    if (timeoutID) {
        clearTimeout(timeoutID);
        timeoutID = null;
    }

    await updateBotConfig(botConfig.botId, { isSpamming: false });

    commandSentFromChannel.channel.send("üî¥ Stopping spam!");
    console.log("üî¥ Stopping spam!");
};
